
File: ex2a.c
Evaluating Time Taken to Generate Prime Numbers
=====================================================================
Written by: Tali Kalev, ID:208629691, Login: talikal
		and	Noga Levy, ID:315260927, Login: levyno

This program creates a child process that generates random numbers.
If the child process takes less than 1 or 2 seconds to generate 100,000
prime numbers, then the father prints 1 or 2 respectively. If the child
process takes more than 2 seconds to generate 100,000 prime numbers than
the father proccess kills the child process, prints 0 and ends.

Race Conditions: There are no race conditions in this code.

Compile: gcc -Wall ex2a.c -o ex2a
Run: ./ex2a 

Input: No Input

Output: Either 1, 2 or 0 according to the time the child process took.
		If the child took more than 2 seconds the following is the output:
		Example: 0


Files: ex2b.c
Sending Signals Between Processes
=====================================================================
Written by: Tali Kalev, ID:208629691, Login: talikal
		and	Noga Levy, ID:315260927, Login: levyno

In this program 2 signal handlers are declared, one for SIGUSR1 and SIGUSR2 and another for SIGTERM. The parent process then creates a child process and then seperately they execute the following in an infiniate loop:
1. Go to sleep 0-2 seconds
2. Generate a random number between 0 and 2
	If 0 is generated, the program ends. If 1 or 2 is generated then the 
	process sends to the other SIGUSR1 or SIGUSR2 respectively.
3. Counts the number of times it send either SIGUSR1 or SIGUSR2
	If the counter reaches 7, the program prints a message and ends.
In the signal handler for signals SIGUSR1 and SIGUSR2, the function
counts how many times it received each signal. If one of the signals
were received 5 times, then the program prints a message, sends SIGTERM
to other signal and ends.
In the signal handler for SIGTERM, the process prints that it won and ends.

Race Conditions: There are no race conditions in this code.

Compile: gcc -Wall ex2b.c -o ex2b

Run: ./ex2b

Input: No Input	

Output: Messages from the signal handlers and end messages:
		Example: Process 18239 got signal SIGUSR2
				 Process 18239 got signal SIGUSR1
				 Process 18240 got signal SIGUSR2
				 Process 18239 got signal SIGUSR2
				 Process 18239 got signal SIGUSR1
				 Process 18240 got signal SIGUSR2
				 Process 18239 got signal SIGUSR2
				 Process 18239 got signal SIGUSR1
				 Process 18240 got signal SIGUSR2
				 Process 18239 got signal SIGUSR2
				 Process 18239 got signal SIGUSR1
				 Process 18240 got signal SIGUSR2
				 Process 18239 got signal SIGUSR2
				 Process 18239 got signal SIGUSR1
				 Process 18239 surrender
				 Process 18240 win
